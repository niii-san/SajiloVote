generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum EVENT_TYPE {
    POLL
    VOTE
}

enum START_TYPE {
    IMMEDIATE
    MANUAL
    TIME
}

enum END_TYPE {
    MANUAL
    TIME
}

// User model
model User {
    id             String    @id
    first_name     String
    last_name      String
    suspended      Boolean   @default(false)
    suspended_till DateTime? @db.Timestamptz()
    email_address  String    @unique
    password       String
    created_at     DateTime  @default(now()) @db.Timestamptz()
    updated_at     DateTime  @updatedAt @db.Timestamptz()

    // relations
    events_created      Event[]
    votes_voted         VoteRecord[]
    events_participated EventParticipant[]

    @@map("users")
}

// Event Model
model Event {
    id             String     @id
    title          String
    description    String?
    password       String
    type           EVENT_TYPE
    creator_id     String
    start_type     START_TYPE
    start_at       DateTime?
    end_type       END_TYPE
    end_at         DateTime?
    multi_vote     Boolean    @default(false)
    anonymous_vote Boolean    @default(false)
    created_at     DateTime   @default(now()) @db.Timestamptz(6)
    updated_at     DateTime   @updatedAt @db.Timestamptz(6)

    // relations
    creator                User                       @relation(fields: [creator_id], references: [id], onDelete: Cascade)
    candidate_vote_options VoteEventCandidateOption[]
    poll_vote_options      PollEventVoteOption[]
    votes_records          VoteRecord[]
    event_participants     EventParticipant[]

    @@map("events")
}

// Table for tracking users joining events
model EventParticipant {
    id                String   @id
    event_id          String
    user_id           String
    initial_joined_at DateTime @default(now()) @db.Timestamptz(6)
    latest_rejoin     DateTime @updatedAt @db.Timestamptz(6)

    // relations 
    event Event @relation(fields: [event_id], references: [id])
    user  User  @relation(fields: [user_id], references: [id])

    @@map("joined_events")
}

// Event candidiate vote options model
model VoteEventCandidateOption {
    id              String  @id
    event_id        String
    candidate_name  String
    candidate_email String?

    // relations
    event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

    @@map("vote_event_candidate_options")
}

model PollEventVoteOption {
    id          String @id
    event_id    String
    option_text String

    // relations
    event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

    @@map("poll_event_vote_options")
}

// Vote records model
model VoteRecord {
    id                        String   @id
    event_id                  String
    voter_id                  String
    voted_candidate_option_id Int?
    voted_poll_option_id      Int?
    created_at                DateTime @default(now()) @db.Timestamptz()
    updated_at                DateTime @updatedAt @db.Timestamptz()

    // relations
    event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [voter_id], references: [id], onDelete: Cascade)
}
