/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as AuthenticatedImport } from "./routes/_authenticated"
import { Route as IndexImport } from "./routes/index"
import { Route as AuthenticatedProfileImport } from "./routes/_authenticated/profile"
import { Route as AuthenticatedDashboardImport } from "./routes/_authenticated/dashboard"
import { Route as authSignupImport } from "./routes/(auth)/signup"
import { Route as authLoginImport } from "./routes/(auth)/login"

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: "/_authenticated",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => AuthenticatedRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: "/(auth)/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: "/(auth)/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/_authenticated": {
      id: "/_authenticated"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    "/(auth)/login": {
      id: "/(auth)/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    "/(auth)/signup": {
      id: "/(auth)/signup"
      path: "/signup"
      fullPath: "/signup"
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    "/_authenticated/dashboard": {
      id: "/_authenticated/dashboard"
      path: "/dashboard"
      fullPath: "/dashboard"
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    "/_authenticated/profile": {
      id: "/_authenticated/profile"
      path: "/profile"
      fullPath: "/profile"
      preLoaderRoute: typeof AuthenticatedProfileImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "": typeof AuthenticatedRouteWithChildren
  "/login": typeof authLoginRoute
  "/signup": typeof authSignupRoute
  "/dashboard": typeof AuthenticatedDashboardRoute
  "/profile": typeof AuthenticatedProfileRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "": typeof AuthenticatedRouteWithChildren
  "/login": typeof authLoginRoute
  "/signup": typeof authSignupRoute
  "/dashboard": typeof AuthenticatedDashboardRoute
  "/profile": typeof AuthenticatedProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/_authenticated": typeof AuthenticatedRouteWithChildren
  "/(auth)/login": typeof authLoginRoute
  "/(auth)/signup": typeof authSignupRoute
  "/_authenticated/dashboard": typeof AuthenticatedDashboardRoute
  "/_authenticated/profile": typeof AuthenticatedProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "" | "/login" | "/signup" | "/dashboard" | "/profile"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "" | "/login" | "/signup" | "/dashboard" | "/profile"
  id:
    | "__root__"
    | "/"
    | "/_authenticated"
    | "/(auth)/login"
    | "/(auth)/signup"
    | "/_authenticated/dashboard"
    | "/_authenticated/profile"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard",
        "/_authenticated/profile"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile": {
      "filePath": "_authenticated/profile.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
